package com.zszd.ai.servlet;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadBase;
import org.apache.commons.fileupload.ProgressListener;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.zszd.ai.service.PostService;
import com.zszd.ai.service.impl.PostServiceImpl;

/**
 * 工作成果
 * 
 * @author lizx 20180103
 * 
 */
@WebServlet(urlPatterns = { "/workresult" }, name = "workresult")
public class WorkresultServlet extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		this.doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html;charset=UTF-8");
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName()
				+ ":" + request.getServerPort() + path + "/";
		PostService postService = new PostServiceImpl();
		String opr = request.getParameter("opr");
		PrintWriter out1 = response.getWriter();
		if ("upload".equals(opr)) {
			String name1 = request.getParameter("loginname");
			// 得到上传文件的保存路径，将上传的文件存放在WEB-INF下，不允许外界直接访问，保证上传文件的安全
			String savePath = this.getServletContext().getRealPath(
					"/WEB-INF/upload");
			// 上传时生成一个临时文件保存目录
			String tempPath = this.getServletContext().getRealPath(
					"/WEB-INF/temp");
			File tempfile = new File(tempPath);
			// 判断上传文件的临时保存目录是否存在
			if (!tempfile.exists()) {
				System.out.println(savePath + "：文件目录不存在，正在创建........");
				// 创建目录
				tempfile.mkdir();
			}
			String message = "";
			try {
				// 使用Apache文件上传组件处理文件上传步骤
				// 1.创建一个DiskFileItemFactory工厂
				DiskFileItemFactory factory = new DiskFileItemFactory();
				// 设置工厂的缓存区大小，当上传文件的大小超过缓冲区的大小时，就会生成一个临时文件存放到指定的临时目录下
				factory.setSizeThreshold(1024 * 100);// 设置缓存区的大小是100KB，默认10KB
				// 设置上传时生成的临时文件的保存目录
				factory.setRepository(tempfile);
				// 2.创建一个文件上传解析器
				ServletFileUpload upload = new ServletFileUpload(factory);
				// 解决上传文件中文乱码问题
				upload.setHeaderEncoding("utf-8");
				// 监听文件上传进度
				upload.setProgressListener(new ProgressListener() {
					public void update(long pBytesRead, long pContentLength,
							int arg2) {
						System.out.println("文件的大小是：" + pContentLength
								+ "，当前已处理：" + pBytesRead);
					}
				});
				// 3.判断上传来的数据是否是上传表单的数据
				if (!ServletFileUpload.isMultipartContent(request)) {
					// 按照传统方式获取数据
					return;
				}
				// 设置上传单个文件的大小的最大值1M
				upload.setFileSizeMax(1024 * 1024);
				// 设置上传文件的总量的最大值10M
				upload.setSizeMax(1024 * 1024 * 10);
				// 4.使用ServletFileUpload解析器解析上传数据，解析的结果返回的是一个List<FileItem>结合，每个FileItem对应一个Form表单的输入项
				List<FileItem> list = upload.parseRequest(request);
				for (FileItem item : list) {
					// 如果fileItem中封装的是普通输入项数据
					if (item.isFormField()) {
						String name = item.getFieldName();
						// 解决普通输入项中文乱码问题
						String value = item.getString("utf-8");
						/*
						 * //按用户给资源分类 savePath = savePath + "\\" + value;
						 * //按日期给资源分类（可将用户名和日期用于文件名中，以方便下载） Calendar cale =
						 * Calendar.getInstance(); String year =
						 * cale.get(Calendar.YEAR)+""; String month =
						 * cale.get(Calendar.MONTH) + 1 +""; String day =
						 * cale.get(Calendar.DATE)+""; savePath = savePath +
						 * "\\" + year + "\\" + month + "\\" + day;
						 */
					} else {// 否则封装的是上传文件
						// 得到文件的上传名称
						String fileName = item.getName();
						List<String> fillType = Arrays.asList("rar", "7z",
								"zip");
						String ext = fileName.substring(fileName
								.lastIndexOf(".") + 1);
						System.out.println(fileName);
						if (fileName == null || fileName.trim().equals("")) {
							continue;
						}
						// 注意：不同浏览器提交的文件名称是不一样的，有的是带有文件路径的，而有的只有文件名
						// 截取路径，只获取文件名称
						if (!fillType.contains(ext)) {
							message = "注意压缩格式只能是rar,7z,zip,请重新上传！";
						} else {
							fileName = fileName.substring(fileName
									.lastIndexOf("\\") + 1);
							// 获取上传文件的后缀名，可用于验证上传文件是否合法
							String fileExtname = fileName.substring(fileName
									.lastIndexOf(".") + 1);
							// 获取item中文件上传的输入流
							InputStream in = item.getInputStream();
							// 得到文件的保存名称
							String saveFilename = makeFilename(fileName);
							// 得到文件的存储路径
							// 可重复上传同一文件，存储路径不一致
							String saveFilepath = makePath(saveFilename,
									savePath);
							// 可重复上传同一文件，存储路径一致
							// String saveFilepath = makePath(filename,
							// savePath);
							// 创建一个文件输出流
							FileOutputStream out = new FileOutputStream(
									saveFilepath + "\\" + saveFilename);
							// 创建一个缓冲区
							byte[] bytes = new byte[1024];
							int len = 0;
							while ((len = in.read(bytes)) != -1) {
								out.write(bytes, 0, len);
							}
							in.close();
							out.close();
							// 删除处理文件上传时生成的临时文件
							item.delete();
							message = "文件上传成功";
						}
					}
				}
			} catch (FileUploadBase.FileSizeLimitExceededException e) {
				e.printStackTrace();
				message = "单个文件超出最大值！";
				System.out.println("单个文件超出最大值！");
			} catch (FileUploadBase.SizeLimitExceededException e) {
				e.printStackTrace();
				message = "上传文件的总的大小超出限制的最大值！";
				System.out.println("上传文件的总的大小超出限制的最大值！");
			} catch (Exception e) {
				e.printStackTrace();
				message = "文件上传失败";
				System.out.println("文件上传失败");
			} finally {
				request.setAttribute("message", message);
				request.getRequestDispatcher(
						"/jsp/uploadFile/uploadFile_list.jsp").forward(request,
						response);
			}
		}
	}

	/**
	 * 生成一个新的上传文件的文件名
	 * 
	 * @param filename
	 *            文件的原始名称
	 * @return String 新的文件名
	 */
	private String makeFilename(String filename) {
		return UUID.randomUUID().toString() + "_" + filename;
	}

	/**
	 * 为防止一个目录下出现太多的文件，要使用hashcode算法打算存储
	 * 
	 * @param filename
	 *            文件名
	 * @param savePath
	 *            文件原始存储路径
	 * @return String 新的存储路径
	 */
	private String makePath(String filename, String savePath) {
		// 得到文件名的hashcode值，得到的就是filename这个字符串对象在内存中的地址
		int hashcode = filename.hashCode();
		int dir1 = hashcode & 0xf; // 0--15
		int dir2 = (hashcode & 0xf0) >> 4; // 0-15
		// 得到新的保存路径
		String dir = savePath + "\\" + dir1 + "\\" + dir2;
		File file = new File(dir);
		// 若目录不存在
		if (!file.exists()) {
			// 创建目录
			file.mkdirs();
		}
		return dir;
	}
}
