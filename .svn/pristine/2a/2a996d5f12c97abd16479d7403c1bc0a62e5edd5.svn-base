package com.zszd.ai.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.zszd.ai.model.Comment;
import com.zszd.ai.model.SysUser;
import com.zszd.ai.service.CommentService;
import com.zszd.ai.service.PostService;
import com.zszd.ai.service.SysUserService;
import com.zszd.ai.service.impl.CommentServiceImpl;
import com.zszd.ai.service.impl.PostServiceImpl;
import com.zszd.ai.service.impl.SysUserServiceImpl;
/**
 * 评论
 * @author lizx 20180103
 *
 */
@WebServlet(urlPatterns = { "/comment" }, name = "comment")
public class CommentServlet extends HttpServlet {

	private static transient Log logger = LogFactory.getLog(CommentServlet.class);
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		this.doPost(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("text/html;charset=UTF-8");
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://"
				+ request.getServerName() + ":" + request.getServerPort()
				+ path + "/";
		HttpSession session = request.getSession();// 获取session
		ServletContext application = this.getServletContext();// 获取application
		String opr = request.getParameter("opr");
		SysUserService sysUserService = new SysUserServiceImpl();
		PostService postService = new PostServiceImpl();
		CommentService commentService = new CommentServiceImpl();
		PrintWriter out = response.getWriter();
		String name = (String) session.getAttribute("login");
	    if("add".equals(opr)){
			String postId = request.getParameter("postId");
		    String content = request.getParameter("content");
			String result ="";
		    if(content != null && content.trim() != ""){
		    	
			    content = (String) request.getAttribute("WordFilterContent");
		        SysUser sysUser = sysUserService.getUserInfoByUserName(name);
		        Date now = new Date();      
				Comment comment = new Comment();
				comment.setContent(content);
				comment.setUserName(name);
				comment.setUserIP(sysUser.getLoginIPaddress());
				comment.setPostId(Integer.parseInt(postId));
				comment.setCommentDate(now);
				
				int row = commentService.addCommentInfo(comment);	
				if (row==1) {
					logger.debug("评论添加成功！");
					result ="success";
				} else {
					logger.debug("评论添加失败！请联系管理员查找原因！");
					result ="评论添加失败！请联系管理员查找原因！";
				}			
		    	out.print("[{\"result\":\""+result+"\"}]");				
				out.flush();
				out.close();
		    }else{
		    	result ="评论内容不能为空！";
				logger.debug("评论内容不能为空！");
		    	out.print("[{\"result\":\""+result+"\"}]");			
				out.flush();
				out.close();
		    }
			
			
		}else if ("modify".equals(opr)) {
		    String commentId = request.getParameter("commentId");
			Comment comment = commentService.getCommentByCommentId(Integer
					.valueOf(commentId));
			request.setAttribute("comment", comment);
			request.getRequestDispatcher("jsp/comment/comment_modify.jsp").forward(
			request, response);
		}else if ("delete".equals(opr)) {
			String commentId = request.getParameter("commentId");
			out.print("<script type='text/javascript'>");
			out.print("alert('确认要删除吗？点击确认删除！');");
			out.print("location.href=\"" + basePath
					+ "comment?opr=deleteComment&commentId="+commentId+"\";");
			out.print("</script>");
		}else if("submitModify".equals(opr)){
		   String content = request.getParameter("content");
		   String commentId = request.getParameter("commentId");
		   Comment comment = new Comment();
		   comment.setId(Integer.valueOf(commentId));
		   comment.setContent(content);
		   int row = commentService.updateCommentInfo(comment);  
		   if(row>0){
				out.print("<script type='text/javascript'>");
				out.print("alert('当前评论信息更新成功，点击确认返回评论信息列表！');");
				out.print("location.href=\"" + basePath
						+ "comment?opr=list\";");
				out.print("</script>");
			}else{
				out.print("<script type='text/javascript'>");
				out.print("alert('当前评论信息更新成功，点击确认返回评论信息列表！');");
				out.print("location.href=\"" + basePath
						+ "comment?opr=list\";");
				out.print("</script>");
			}
		}else if ("deleteComment".equals(opr)) {
		   String commentId = request.getParameter("commentId");
	       if(commentService.deleteCommentById(Integer.valueOf(commentId))>0){
				out.print("<script type='text/javascript'>");
				out.print("alert('当前评论信息更新成功，点击确认返回评论信息列表！');");
				out.print("location.href=\"" + basePath
						+ "comment?opr=list\";");
				out.print("</script>");
		   }else{
			out.print("<script type='text/javascript'>");
			out.print("alert('当前评论信息更新成功，点击确认返回评论信息列表！');");
			out.print("location.href=\"" + basePath
					+ "comment?opr=list\";");
			out.print("</script>");
		   }
		}
	}
}
